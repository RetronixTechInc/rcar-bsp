From ca424966895a72963bef27a939cfbf8013a0bd6f Mon Sep 17 00:00:00 2001
From: TomWang <townwang@retronix.com.tw>
Date: Mon, 4 Sep 2023 13:33:47 +0800
Subject: [PATCH] support IVI GMSL camera.

---
 EvsEnumerator.cpp    | 73 +++++++++++++++++++++++++++++++++-----------
 EvsEnumerator.h      |  1 +
 config.salvator.json | 50 +++++++++++++++++++++++++-----
 3 files changed, 100 insertions(+), 24 deletions(-)

diff --git a/EvsEnumerator.cpp b/EvsEnumerator.cpp
index b3e24a2..a117aa3 100644
--- a/EvsEnumerator.cpp
+++ b/EvsEnumerator.cpp
@@ -51,22 +51,29 @@ EvsEnumerator::EvsEnumerator() {
     */
 
     /* subdev for HDMI camera input */
-    const char *subdev_name = "/dev/v4l-subdev1";
+    //const char *subdev_name = "/dev/v4l-subdev1";
+    const char *subdev_name_csi = "/dev/v4l-subdev0";
     // Constant predefined list of EVS cameras in the "/dev" filesystem.
     const std::vector<const char *> cameraNames {
-        "/dev/video3",
-        "/dev/video2",
-        "/dev/video1",
-        "/dev/video0"
+        "/dev/video7",
+        "/dev/video6",
+        "/dev/video5",
+        "/dev/video4"
     };
 
+#if 0
     if(access(subdev_name, F_OK ) != -1){
         if(subdevCameraSetup(subdev_name)) {
             ALOGD("Successfully setup camera %s", subdev_name);
         } else {
             ALOGE("Error during setup %s", subdev_name);
         }
-    } else {
+    } 
+    else 
+#endif
+    {
+		subdevCsiSetup(subdev_name_csi);
+		
         // Probe each camera one by one and use only that which can be opened and requested.
         for (auto cn : cameraNames) {
             const int fd = open(cn, O_RDWR);
@@ -78,12 +85,14 @@ EvsEnumerator::EvsEnumerator() {
             v4l2_format format;
             std::memset(&format, 0x00, sizeof(format));
             format.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-            if (ioctl(fd, VIDIOC_G_FMT, &format) < 0) {
+            if (ioctl(fd, VIDIOC_G_FMT, &format) < 0) 
+            {
                 ALOGE("VIDIOC_G_FMT: %s for device %s.", strerror(errno), cn);
-            } else {
+            } 
+            else 
+            {
                 sCameraList.emplace_back(cn, format.fmt.pix.width, format.fmt.pix.height);
-                ALOGI("Camera %s (%ux%u) is successfully probed.",
-                        cn, format.fmt.pix.width, format.fmt.pix.height);
+                ALOGI("Camera %s (%ux%u) is successfully probed.", cn, format.fmt.pix.width, format.fmt.pix.height);
             }
 
             close(fd);
@@ -98,6 +107,32 @@ EvsEnumerator::EvsEnumerator() {
  * If ioctl return zeros in width and height fields - it means that camera not
  * connected.
  */
+bool EvsEnumerator::subdevCsiSetup(const char* subdev_name) {
+	v4l2_subdev_format sub_format = {};
+    sub_format.which = V4L2_SUBDEV_FORMAT_ACTIVE;
+    sub_format.format.code = MEDIA_BUS_FMT_UYVY8_2X8;
+    sub_format.format.field = V4L2_FIELD_NONE;
+    sub_format.format.colorspace = V4L2_COLORSPACE_SRGB;
+    sub_format.format.width = 1280;
+    sub_format.format.height = 800;
+    sub_format.pad = 1;
+
+	int fd = -1;
+		
+	if( (fd = open(subdev_name, O_RDWR)) == -1) {
+        ALOGE("Error while opening device %s: %s", subdev_name, strerror(errno));
+        return false;
+    }
+
+    if (ioctl(fd, VIDIOC_SUBDEV_S_FMT, &sub_format) < 0) {
+        ALOGE("%s VIDIOC_SUBDEV_G_FMT: %s", subdev_name, strerror(errno));
+        return false;
+    }
+    close(fd);
+    
+    return true;
+}
+
 bool EvsEnumerator::subdevCameraSetup(const char* subdev_name) {
     /*
     Set input resolution and format.
@@ -137,7 +172,8 @@ bool EvsEnumerator::subdevCameraSetup(const char* subdev_name) {
     sub_format.format.height = 0;
     sub_format.pad = 1;
 
-    int fd = -1;
+	int fd = -1;
+#if 0
     if( (fd = open(subdev_name, O_RDWR)) == -1) {
         ALOGE("Error while opening device %s: %s", subdev_name, strerror(errno));
         return false;
@@ -148,9 +184,11 @@ bool EvsEnumerator::subdevCameraSetup(const char* subdev_name) {
         return false;
     }
     close(fd);
-
-    ALOGD("Parameters received from camera is w=%u h=%u\n",
-                sub_format.format.width, sub_format.format.height);
+#endif
+	sub_format.format.width = 1280;
+	sub_format.format.height = 800;
+	
+    ALOGD("Parameters received from camera is w=%u h=%u\n",sub_format.format.width, sub_format.format.height);
     if(sub_format.format.height && sub_format.format.width){
         /* Set format on source pad of CSI2 */
         sub_format.pad = 0;
@@ -178,6 +216,7 @@ bool EvsEnumerator::subdevCameraSetup(const char* subdev_name) {
         }
         close(fd);
 
+#if 0
         /* Set format on sink (input, ADV748X_CSI2_SINK) pad of ADV7482 TXA */
         sub_format.pad = 0;
         if ((fd = open("/dev/v4l-subdev2", O_RDWR)) == -1) {
@@ -190,8 +229,8 @@ bool EvsEnumerator::subdevCameraSetup(const char* subdev_name) {
             return false;
         }
         close(fd);
-
-        sCameraList.emplace_back("/dev/video0", sub_format.format.width, sub_format.format.height);
+#endif
+        sCameraList.emplace_back("/dev/video4", sub_format.format.width, sub_format.format.height);
     } else {
         ALOGD("No camera found with %s", subdev_name);
         return false;
@@ -215,6 +254,7 @@ Return<void> EvsEnumerator::getCameraList(getCameraList_cb _hidl_cb)  {
 
     // Send back the results
     ALOGD("reporting %zu cameras available", hidlCameras.size());
+    
     _hidl_cb(hidlCameras);
 
     // HIDL convention says we return Void if we sent our result back via callback
@@ -252,7 +292,6 @@ Return<sp<IEvsCamera>> EvsEnumerator::openCamera(const hidl_string& cameraId) {
 
 Return<void> EvsEnumerator::closeCamera(const ::android::sp<IEvsCamera>& pCamera) {
     ALOGD("closeCamera");
-
     if (pCamera == nullptr) {
         ALOGE("Ignoring call to closeCamera with null camera ptr");
         return Void();
diff --git a/EvsEnumerator.h b/EvsEnumerator.h
index f839fca..7bf25f3 100644
--- a/EvsEnumerator.h
+++ b/EvsEnumerator.h
@@ -77,6 +77,7 @@ private:
     static wp<EvsDisplay>          sActiveDisplay; // Weak pointer. Object destructs if client dies.
 
     static bool subdevCameraSetup(const char *subdev_name);
+    static bool subdevCsiSetup(const char *subdev_name);
 
 };
 
diff --git a/config.salvator.json b/config.salvator.json
index 0bea216..a62f643 100644
--- a/config.salvator.json
+++ b/config.salvator.json
@@ -14,17 +14,53 @@
     "rearPixel" : 223
   },
   "cameras" : [
-    {
-      "cameraId" : "/dev/video0",
+  {
+      "cameraId" : "/dev/video4",
       "function" : "reverse,park",
       "x" : 0.0,
-      "y" : -40.0,
-      "z" : 50,
+      "y" : 0.0,
+      "z" : 150,
       "yaw" : 180,
       "pitch" : -50,
-      "hfov" : 125,
-      "vfov" : 80,
-      "distort": "none"
+      "hfov" : 90,
+      "vfov" : 30,
+      "distort": "pincushion"
+    },
+    {
+      "cameraId" : "/dev/video5",
+      "function" : "park",
+      "x" : 0.0,
+      "y" : 100.0,
+      "z" : 150,
+      "yaw" : 0,
+      "pitch" : -50,
+      "hfov" : 90,
+      "vfov" : 30,
+      "distort": "pincushion"
+    },
+    {
+      "cameraId" : "/dev/video6",
+      "function" : "park",
+      "x" : 100.0,
+      "y" : 50.0,
+      "z" : 150,
+      "yaw" : 270,
+      "pitch" : -50,
+      "hfov" : 90,
+      "vfov" : 30,
+      "distort": "pincushion"
+    },
+    {
+      "cameraId" : "/dev/video7",
+      "function" : "park",
+      "x" : -100.0,
+      "y" : 50.0,
+      "z" : 150,
+      "yaw" : 90,
+      "pitch" : -50,
+      "hfov" : 90,
+      "vfov" : 30,
+      "distort": "pincushion"
     }
   ]
 }
-- 
2.17.1

